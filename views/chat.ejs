<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Wikipedia Style Chat</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    /* Wikipedia-inspired color scheme */
    :root {
      --wikipedia-blue: #3366cc;
      --wikipedia-light-blue: #eaf3ff;
      --wikipedia-dark-blue: #2a4b8d;
      --wikipedia-gray: #f8f9fa;
      --wikipedia-border: #a2a9b1;
      --wikipedia-text: #202122;
      --wikipedia-red: #cc0000;
      --wikipedia-green: #00af89;
      --wikipedia-background: #f8f9fa;
      --notification-red: #ff5252;
    }

    /* Reset & Base Styles */
    * { 
      margin: 0; 
      padding: 0; 
      box-sizing: border-box; 
    }
    
    body { 
      font-family: 'Linux Libertine', 'Georgia', 'Times', serif;
      background: var(--wikipedia-background);
      color: var(--wikipedia-text);
      line-height: 1.5;
      height: 100vh;
      display: flex;
      flex-direction: column;
    }

    /* Wikipedia-style header */
    .chat-header { 
      background: white;
      border-bottom: 1px solid var(--wikipedia-border);
      padding: 8px 16px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 1px 2px rgba(0,0,0,0.1);
      position: relative;
    }
    
    .header-title {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 16px;
      font-weight: normal;
    }
    
    .header-title strong {
      font-weight: bold;
      color: var(--wikipedia-blue);
    }
    
    .username {
      font-weight: bold;
      color: var(--wikipedia-dark-blue);
      font-size: 14px;
    }
    
    .header-actions {
      display: flex;
      gap: 8px;
    }
    
    .chat-header button,
    .chat-header a { 
      padding: 6px 12px;
      border: 1px solid var(--wikipedia-border);
      border-radius: 2px;
      font-size: 14px;
      text-decoration: none;
      cursor: pointer;
      transition: background-color 0.2s;
      background: white;
      color: var(--wikipedia-text);
    }
    
    .delete-all { 
      color: var(--wikipedia-red);
      border-color: var(--wikipedia-red);
    }
    
    .chat-header button:hover, 
    .chat-header a:hover { 
      background: var(--wikipedia-gray);
    }
    
    .delete-all:hover {
      background: #ffeeee;
    }

    /* Notification badge */
    .notification-badge {
      position: absolute;
      top: -5px;
      right: -5px;
      background-color: var(--notification-red);
      color: white;
      border-radius: 50%;
      width: 18px;
      height: 18px;
      font-size: 12px;
      display: flex;
      justify-content: center;
      align-items: center;
      opacity: 0;
      transition: opacity 0.3s;
    }
    
    .notification-badge.show {
      opacity: 1;
    }

    /* Main chat container */
    .chat-container {
      display: flex;
      flex-direction: column;
      height: 100%;
      max-width: 1200px;
      margin: 0 auto;
      background: white;
      width: 100%;
    }

    /* Wikipedia-style content area */
    .chat-main { 
      display: flex;
      flex: 1;
      overflow: hidden;
    }

    /* Chat messages - Wikipedia discussion style */
    .chat-messages { 
      flex: 3;
      padding: 16px;
      background: white;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 16px;
      border-right: 1px solid var(--wikipedia-border);
    }
    
    /* Message containers */
    .message-container {
      display: flex;
      flex-direction: column;
      max-width: 75%;
    }
    
    .message-container.sender {
      align-self: flex-end;
      align-items: flex-end;
    }
    
    .message-container.receiver {
      align-self: flex-start;
      align-items: flex-start;
    }
    
    /* Message bubbles */
    .chat-bubble { 
      padding: 10px 14px;
      border: 1px solid var(--wikipedia-border);
      border-radius: 3px;
      background: white;
      position: relative;
      word-wrap: break-word;
      line-height: 1.4;
    }
    
    .chat-bubble.sender { 
      background: var(--wikipedia-light-blue);
      border-color: #a2c0e6;
    }
    
    .chat-bubble.receiver { 
      background: var(--wikipedia-gray);
    }
    
    /* Message info (sender and time) */
    .message-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 12px;
      margin-top: 4px;
      padding: 0 4px;
      width: 100%;
    }
    
    .message-sender {
      font-weight: bold;
      color: var(--wikipedia-dark-blue);
    }
    
    .message-time {
      color: #54595d;
    }
    
    /* Delete button - subtle Wikipedia style */
    .delBtn { 
      background: transparent;
      border: none;
      color: #72777d;
      cursor: pointer;
      font-size: 12px;
      position: absolute;
      top: 6px;
      right: 6px;
      opacity: 0;
      transition: opacity 0.2s;
      padding: 2px;
    }
    
    .chat-bubble:hover .delBtn { 
      opacity: 1;
    }
    
    .delBtn:hover {
      color: var(--wikipedia-red);
    }

    /* Users sidebar - Wikipedia style */
    .chat-users { 
      width: 220px;
      padding: 16px;
      background: white;
      overflow-y: auto;
      border-left: 1px solid var(--wikipedia-border);
    }
    
    .chat-users h3 { 
      margin-bottom: 12px;
      font-size: 16px;
      font-weight: bold;
      color: var(--wikipedia-text);
      padding-bottom: 6px;
      border-bottom: 1px solid var(--wikipedia-border);
    }
    
    .chat-users ul { 
      list-style: none;
    }
    
    .chat-users li { 
      padding: 8px 12px;
      margin-bottom: 6px;
      font-size: 14px;
      border-bottom: 1px solid #eaecf0;
    }
    
    .chat-users li:before {
      content: "â€¢";
      color: var(--wikipedia-green);
      font-weight: bold;
      display: inline-block;
      width: 1em;
      margin-left: -1em;
    }

    /* Chat form - Wikipedia style */
    .chat-form { 
      display: flex;
      padding: 12px 16px;
      background: #f8f9fa;
      border-top: 1px solid var(--wikipedia-border);
      gap: 8px;
    }
    
    .chat-form input { 
      flex: 1;
      padding: 10px 12px;
      border: 1px solid var(--wikipedia-border);
      border-radius: 2px;
      outline: none;
      font-size: 14px;
      font-family: inherit;
    }
    
    .chat-form input:focus {
      border-color: var(--wikipedia-blue);
      box-shadow: 0 0 0 1px var(--wikipedia-blue);
    }
    
    .chat-form button { 
      padding: 10px 16px;
      border: 1px solid var(--wikipedia-blue);
      border-radius: 2px;
      background: var(--wikipedia-blue);
      color: white;
      cursor: pointer;
      font-family: inherit;
      font-size: 14px;
    }
    
    .chat-form button:hover { 
      background: var(--wikipedia-dark-blue);
    }

    /* Notification toast */
    .notification-toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: white;
      border: 1px solid var(--wikipedia-border);
      border-radius: 3px;
      padding: 12px 16px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      align-items: center;
      gap: 10px;
      max-width: 320px;
      z-index: 1000;
      transform: translateY(100px);
      opacity: 0;
      transition: transform 0.3s, opacity 0.3s;
    }
    
    .notification-toast.show {
      transform: translateY(0);
      opacity: 1;
    }
    
    .notification-icon {
      color: var(--wikipedia-blue);
      font-size: 18px;
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-title {
      font-weight: bold;
      margin-bottom: 4px;
    }
    
    .notification-message {
      font-size: 14px;
      color: var(--wikipedia-text);
    }
    
    .notification-close {
      background: none;
      border: none;
      cursor: pointer;
      color: var(--wikipedia-border);
      font-size: 16px;
    }
    
    .notification-close:hover {
      color: var(--wikipedia-text);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .chat-main {
        flex-direction: column;
      }
      
      .chat-users {
        width: 100%;
        border-left: none;
        border-top: 1px solid var(--wikipedia-border);
        order: -1;
        max-height: 150px;
      }
      
      .message-container {
        max-width: 90%;
      }
      
      .header-actions {
        flex-wrap: wrap;
        justify-content: flex-end;
      }
      
      .notification-toast {
        left: 20px;
        right: 20px;
        max-width: none;
      }
    }

    /* Signature style for usernames */
    .message-sender:after {
      content: " (talk)";
      font-weight: normal;
      font-size: 11px;
      color: #54595d;
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <div class="chat-header">
      <div class="header-title">
        <i class="fas fa-comments"></i>
        <span>Chat discussion: <strong><%= username %></strong></span>
        <span class="notification-badge" id="notificationBadge">0</span>
      </div>
      <div class="header-actions">
        <button id="notificationToggle" class="small-btn">
          <i class="fas fa-bell"></i> Notifications
        </button>
        <button id="deleteAllBtn" class="delete-all">
          <i class="fas fa-trash-alt"></i> Purge
        </button>
        <a href="/dashboard" class="small-btn">
          <i class="fas fa-chart-line"></i> Dashboard
        </a>
        <a href="/logout" class="small-btn">
          <i class="fas fa-sign-out-alt"></i> Logout
        </a>
      </div>
    </div>

    <div class="chat-main">
      <div class="chat-messages" id="messages"></div>

      <div class="chat-users">
        <h3>Active users</h3>
        <ul id="users"></ul>
      </div>
    </div>

    <form id="chatForm" class="chat-form">
      <input id="msg" autocomplete="off" placeholder="Contribute to the discussion..." />
      <button>
        <i class="fas fa-pencil-alt"></i> Post
      </button>
    </form>
  </div>

  <!-- Notification Toast -->
  <div class="notification-toast" id="notificationToast">
    <div class="notification-icon">
      <i class="fas fa-bell"></i>
    </div>
    <div class="notification-content">
      <div class="notification-title" id="toastTitle">New Message</div>
      <div class="notification-message" id="toastMessage"></div>
    </div>
    <button class="notification-close" id="toastClose">
      <i class="fas fa-times"></i>
    </button>
  </div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  const username = "<%= username %>";
  const messages = document.getElementById('messages');
  const usersList = document.getElementById('users');
  const form = document.getElementById('chatForm');
  const input = document.getElementById('msg');
  const deleteAllBtn = document.getElementById('deleteAllBtn');
  const notificationBadge = document.getElementById('notificationBadge');
  const notificationToggle = document.getElementById('notificationToggle');
  const notificationToast = document.getElementById('notificationToast');
  const toastTitle = document.getElementById('toastTitle');
  const toastMessage = document.getElementById('toastMessage');
  const toastClose = document.getElementById('toastClose');
  
  let notificationCount = 0;
  let notificationPermission = false;
  let isWindowFocused = true;

  // Check if browser supports notifications
  const notificationSupported = 'Notification' in window;

  // Request notification permission
  function requestNotificationPermission() {
    if (notificationSupported) {
      Notification.requestPermission().then(permission => {
        notificationPermission = permission === 'granted';
        updateNotificationToggle();
      });
    }
  }

  // Update notification toggle button text
  function updateNotificationToggle() {
    if (notificationSupported) {
      const icon = notificationPermission ? 'fa-bell' : 'fa-bell-slash';
      notificationToggle.innerHTML = `<i class="fas ${icon}"></i> ${notificationPermission ? 'Disable' : 'Enable'} Notifications`;
    } else {
      notificationToggle.style.display = 'none';
    }
  }

  // Show browser notification
  function showBrowserNotification(title, message) {
    if (notificationPermission && !isWindowFocused) {
      const notification = new Notification(title, {
        body: message,
        icon: '/favicon.ico'
      });
      
      notification.onclick = () => {
        window.focus();
        notification.close();
      };
      
      setTimeout(() => notification.close(), 5000);
    }
  }

  // Show toast notification
  function showToastNotification(title, message) {
    toastTitle.textContent = title;
    toastMessage.textContent = message;
    notificationToast.classList.add('show');
    
    setTimeout(() => {
      notificationToast.classList.remove('show');
    }, 5000);
  }

  // Update notification badge
  function updateNotificationBadge() {
    if (notificationCount > 0) {
      notificationBadge.textContent = notificationCount;
      notificationBadge.classList.add('show');
    } else {
      notificationBadge.classList.remove('show');
    }
  }

  // Format time function (Wikipedia style) - Time only, no date
  function formatTime(date) {
    return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  }

  // Window focus/blur events
  window.addEventListener('focus', () => {
    isWindowFocused = true;
    notificationCount = 0;
    updateNotificationBadge();
  });

  window.addEventListener('blur', () => {
    isWindowFocused = false;
  });

  // Notification toggle click
  notificationToggle.addEventListener('click', () => {
    if (notificationPermission) {
      notificationPermission = false;
    } else {
      requestNotificationPermission();
    }
    updateNotificationToggle();
  });

  // Close toast
  toastClose.addEventListener('click', () => {
    notificationToast.classList.remove('show');
  });

  // join
  socket.emit('joinChat', username);

  // load old messages
  socket.on('loadMessages', msgs => {
    msgs.forEach(m => appendMessage(m));
  });

  // new incoming
  socket.on('newMessage', m => {
    appendMessage(m);
    
    // Show notification if message is from another user
    if (m.username !== username) {
      notificationCount++;
      updateNotificationBadge();
      
      const title = 'New Message';
      const message = `${m.username}: ${m.text}`;
      
      // Show toast notification
      showToastNotification(title, message);
      
      // Show browser notification if allowed
      showBrowserNotification(title, message);
    }
  });

  // message deleted
  socket.on('messageDeleted', id => {
    const el = document.getElementById(id);
    if(el) {
      el.style.opacity = '0';
      setTimeout(() => el.remove(), 300);
    }
  });

  // all messages deleted
  socket.on('allMessagesDeleted', () => {
    messages.innerHTML = '';
    const notification = document.createElement('div');
    notification.className = 'message-container receiver';
    notification.innerHTML = `
      <div class="chat-bubble receiver">
        <b>System</b> Discussion was purged by ${username}
      </div>
    `;
    messages.appendChild(notification);
  });

  // users update
  socket.on('updateUsers', users => {
    usersList.innerHTML = '';
    users.forEach(u => {
      const li = document.createElement('li');
      li.textContent = u;
      usersList.appendChild(li);
    });
  });

  // send
  form.addEventListener('submit', e => {
    e.preventDefault();
    if(input.value.trim()){
      socket.emit('chatMessage', { username, text: input.value });
      input.value = '';
    }
  });

  // delete all
  deleteAllBtn.addEventListener('click', () => {
    if(confirm('Purge all messages from this discussion?')) socket.emit('deleteAllMessages');
  });

  // helper to add message DOM (Wikipedia style)
  function appendMessage(m){
    const isMe = m.username === username;
    const messageContainer = document.createElement('div');
    messageContainer.className = `message-container ${isMe ? 'sender' : 'receiver'}`;
    messageContainer.id = m._id;
    
    const bubble = document.createElement('div');
    bubble.className = `chat-bubble ${isMe ? 'sender' : 'receiver'}`;
    bubble.innerHTML = `${escapeHtml(m.text)} 
      <button class="delBtn" onclick="deleteMsg('${m._id}')" title="Delete message">
        <i class="fas fa-times"></i>
      </button>`;
    
    const infoDiv = document.createElement('div');
    infoDiv.className = 'message-info';
    infoDiv.innerHTML = `
      <span class="message-sender">${escapeHtml(m.username)}</span>
      <span class="message-time">${formatTime(m.timestamp || Date.now())}</span>
    `;
    
    messageContainer.appendChild(bubble);
    messageContainer.appendChild(infoDiv);
    messages.appendChild(messageContainer);
    messages.scrollTop = messages.scrollHeight;
  }

  window.deleteMsg = function(id){
    if(confirm('Delete this message from the discussion?')) socket.emit('deleteMessage', id);
  };

  // safe simple escape
  function escapeHtml(s){ 
    return String(s).replace(/[&<>"']/g, function(m){ 
      return {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]; 
    }); 
  }

  // Initialize notification system
  document.addEventListener('DOMContentLoaded', () => {
    if (notificationSupported) {
      notificationPermission = Notification.permission === 'granted';
    }
    updateNotificationToggle();
  });
</script>
</body>
</html>