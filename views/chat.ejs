<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Wikipedia Chat</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    /* Wikipedia-inspired color scheme */
    :root {
      --wikipedia-blue: #3366cc;
      --wikipedia-light-blue: #eaf3ff;
      --wikipedia-dark-blue: #2a4b8d;
      --wikipedia-gray: #f8f9fa;
      --wikipedia-border: #a2a9b1;
      --wikipedia-text: #202122;
      --wikipedia-red: #cc0000;
      --wikipedia-green: #00af89;
      --wikipedia-background: #f8f9fa;
      --wikipedia-reply-indicator: #e6f2ff;
      --wikipedia-sidebar-bg: #f6f6f6;
    }

    /* Reset & Base Styles */
    * { 
      margin: 0; 
      padding: 0; 
      box-sizing: border-box; 
    }
    
    body { 
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Lato, Helvetica, Arial, sans-serif;
      background: var(--wikipedia-background);
      color: var(--wikipedia-text);
      line-height: 1.6;
      height: 100vh;
      display: flex;
      flex-direction: column;
    }

    /* Wikipedia-style header */
    .chat-header { 
      background: white;
      border-bottom: 1px solid var(--wikipedia-border);
      padding: 0.5em 1.5em;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    
    .header-title {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 0.875rem;
      font-weight: normal;
    }
    
    .header-title strong {
      font-weight: bold;
      color: var(--wikipedia-blue);
    }
    
    .username {
      font-weight: bold;
      color: var(--wikipedia-dark-blue);
      font-size: 0.875rem;
    }
    
    .header-actions {
      display: flex;
      gap: 8px;
    }
    
    .chat-header button,
    .chat-header a { 
      padding: 0.375rem 0.75rem;
      border: 1px solid var(--wikipedia-border);
      border-radius: 2px;
      font-size: 0.75rem;
      text-decoration: none;
      cursor: pointer;
      transition: background-color 0.2s;
      background: white;
      color: var(--wikipedia-text);
    }
    
    .delete-all { 
      color: var(--wikipedia-red);
      border-color: var(--wikipedia-red);
    }
    
    .chat-header button:hover, 
    .chat-header a:hover { 
      background: var(--wikipedia-gray);
    }
    
    .delete-all:hover {
      background: #ffeeee;
    }

    /* Main chat container */
    .chat-container {
      display: flex;
      flex-direction: column;
      height: 100%;
      max-width: 100%;
      margin: 0;
      background: white;
      width: 100%;
    }
.typing-indicator, #replyIndicator {
  z-index: 1000;
}

    /* Wikipedia-style content area */
    .chat-main { 
      display: flex;
      flex: 1;
      overflow: hidden;
    }

    /* Chat messages - Wikipedia discussion style */
    .chat-messages { 
      flex: 1;
      padding: 1.5em;
      background: white;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 1.5em;
      position: relative;
    }
    
    /* Message containers */
    .message-container {
      display: flex;
      flex-direction: column;
      max-width: 85%;
      position: relative;
    }
    
    .message-container.sender {
      align-self: flex-end;
      align-items: flex-end;
    }
    
    .message-container.receiver {
      align-self: flex-start;
      align-items: flex-start;
    }
    
    /* Message bubbles */
    .chat-bubble { 
      padding: 0.75em 1em;
      border: 1px solid var(--wikipedia-border);
      border-radius: 3px;
      background: white;
      position: relative;
      word-wrap: break-word;
      line-height: 1.5;
      width: 100%;
      font-size: 0.875rem;
    }
    
    .chat-bubble.sender { 
      background: var(--wikipedia-light-blue);
      border-color: #a2c0e6;
    }
    
    .chat-bubble.receiver { 
      background: var(--wikipedia-gray);
    }
    
    /* Message info (sender and time) */
    .message-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 0.75rem;
      margin-top: 0.25em;
      padding: 0 0.25em;
      width: 100%;
      color: #54595d;
    }
    
    .message-sender {
      font-weight: bold;
      color: var(--wikipedia-dark-blue);
    }
    
    .message-time {
      color: #72777d;
    }
    
    /* Delete button - subtle Wikipedia style */
    .delBtn { 
      background: transparent;
      border: none;
      color: #72777d;
      cursor: pointer;
      font-size: 0.75rem;
      position: absolute;
      top: 0.5em;
      right: 0.5em;
      opacity: 0;
      transition: opacity 0.2s;
      padding: 0.125em;
    }
    
    .chat-bubble:hover .delBtn { 
      opacity: 1;
    }
    
    .delBtn:hover {
      color: var(--wikipedia-red);
    }

    /* Users sidebar - Wikipedia style */
    .chat-users { 
      width: 240px;
      padding: 1em;
      background: var(--wikipedia-sidebar-bg);
      overflow-y: auto;
      border-left: 1px solid var(--wikipedia-border);
    }
    
    .chat-users h3 { 
      margin: 0 0 1em 0;
      font-size: 1rem;
      font-weight: bold;
      color: var(--wikipedia-text);
      padding-bottom: 0.5em;
      border-bottom: 1px solid var(--wikipedia-border);
    }
    
    .chat-users ul { 
      list-style: none;
    }
    
    .chat-users li { 
      padding: 0.5em 0.75em;
      margin-bottom: 0.25em;
      font-size: 0.875rem;
      border-bottom: 1px solid #eaecf0;
    }
    
    .chat-users li:before {
      content: "•";
      color: var(--wikipedia-green);
      font-weight: bold;
      display: inline-block;
      width: 1em;
      margin-left: -1em;
    }

    /* Chat form - Wikipedia style */
    .chat-form { 
      display: flex;
      padding: 1em 1.5em;
      background: #f8f9fa;
      border-top: 1px solid var(--wikipedia-border);
      gap: 0.5em;
    }
    
    .chat-form input { 
      flex: 1;
      padding: 0.625em 0.75em;
      border: 1px solid var(--wikipedia-border);
      border-radius: 2px;
      outline: none;
      font-size: 0.875rem;
      font-family: inherit;
    }
    
    .chat-form input:focus {
      border-color: var(--wikipedia-blue);
      box-shadow: 0 0 0 1px var(--wikipedia-blue);
    }
    
    .chat-form button { 
      padding: 0.625em 1em;
      border: 1px solid var(--wikipedia-blue);
      border-radius: 2px;
      background: var(--wikipedia-blue);
      color: white;
      cursor: pointer;
      font-family: inherit;
      font-size: 0.875rem;
      white-space: nowrap;
    }
    
    .chat-form button:hover { 
      background: var(--wikipedia-dark-blue);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .chat-main {
        flex-direction: column;
      }
      
      .chat-users {
        width: 100%;
        border-left: none;
        border-top: 1px solid var(--wikipedia-border);
        order: -1;
        max-height: 150px;
      }
      
      .message-container {
        max-width: 95%;
      }
      
      .header-actions {
        flex-wrap: wrap;
        justify-content: flex-end;
      }
      
      .chat-header {
        padding: 0.5em;
      }
      
      .chat-messages {
        padding: 1em;
      }
    }

    /* Signature style for usernames */
    .message-sender:after {
      content: " (talk)";
      font-weight: normal;
      font-size: 0.6875rem;
      color: #54595d;
    }
    
    /* Reply functionality styles */
    .reply-btn {
      background: transparent;
      border: none;
      color: #72777d;
      cursor: pointer;
      font-size: 0.75rem;
      margin-left: 0.5em;
      padding: 0.125em 0.375em;
    }
    
    .reply-btn:hover {
      color: var(--wikipedia-blue);
      text-decoration: underline;
    }
    
    .reply-indicator {
      background: var(--wikipedia-reply-indicator);
      border-left: 3px solid var(--wikipedia-blue);
      padding: 0.75em 1em;
      margin: 0 1.5em;
      font-size: 0.8125rem;
      border-radius: 2px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .reply-indicator .replying-to {
      font-weight: bold;
      color: var(--wikipedia-dark-blue);
    }
    
    .reply-indicator .cancel-reply {
      margin-left: 0.5em;
      color: var(--wikipedia-blue);
      cursor: pointer;
      font-size: 0.75rem;
    }
    
    .reply-indicator .cancel-reply:hover {
      text-decoration: underline;
    }
    
    .quoted-message {
      font-style: italic;
      color: #54595d;
      border-left: 2px solid #a2a9b1;
      padding-left: 0.5em;
      margin: 0.5em 0;
      font-size: 0.8125rem;
      line-height: 1.4;
    }
    
    /* Wikipedia-style horizontal rule */
    .chat-messages hr {
      height: 1px;
      background-color: var(--wikipedia-border);
      border: 0;
      margin: 1.5em 0;
    }
    
    /* Section heading style */
    .discussion-heading {
      font-size: 1.125rem;
      font-weight: bold;
      color: var(--wikipedia-text);
      border-bottom: 1px solid var(--wikipedia-border);
      padding-bottom: 0.5em;
      margin-bottom: 1em;
    }
    
    /* Wikipedia link style */
    a {
      color: var(--wikipedia-blue);
      text-decoration: none;
    }
    
    a:hover {
      text-decoration: underline;
    }
    
    /* Notification style */
    .notification {
      background: #fef6e7;
      border: 1px solid #fc3;
      padding: 0.75em 1em;
      margin: 1em 0;
      border-radius: 2px;
      font-size: 0.875rem;
    }
    
    /* Typing indicator styles - POSITIONED AT BOTTOM */
    .typing-indicator {
      position: sticky;
      bottom: 0;
      padding: 0.75em 1em;
      margin: 0.5em 0;
      font-size: 0.8125rem;
      color: #54595d;
      font-style: italic;
      display: flex;
      align-items: center;
      gap: 0.5em;
      background-color: #f8f9fa;
      border-radius: 4px;
      border: 1px solid #eaecf0;
      width: fit-content;
      max-width: 80%;
      align-self: flex-start;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      z-index: 10;
    }
    
    .typing-dots {
      display: flex;
      gap: 0.2em;
    }
    
    .typing-dot {
      width: 0.5em;
      height: 0.5em;
      border-radius: 50%;
      background-color: #3366cc;
      animation: typingAnimation 1.4s infinite ease-in-out;
    }
    
    .typing-dot:nth-child(1) {
      animation-delay: 0s;
    }
    
    .typing-dot:nth-child(2) {
      animation-delay: 0.2s;
    }
    
    .typing-dot:nth-child(3) {
      animation-delay: 0.4s;
    }
    
    @keyframes typingAnimation {
      0%, 60%, 100% {
        transform: translateY(0);
        opacity: 0.6;
      }
      30% {
        transform: translateY(-0.3em);
        opacity: 1;
      }
    }


    .reaction-btn {
  border: none;
  background: transparent;
  cursor: pointer;
  font-size: 1rem;
  margin-left: 4px;
  font-size: smaller;
  font-style: italic;
  border: 1px solid red;
  padding: 1px;
  border-radius: 9px;
  background-color: #e60b95;
  color: white;
}

.emoji-picker {
  display: none; /* hidden by default */
  position: absolute;
  background: white;
  border: 1px solid var(--wikipedia-border);
  border-radius: 4px;
  padding: 4px;
  flex-wrap: wrap;
  gap: 4px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.15);
  z-index: 1000;
  max-width: 200px;
}

.emoji-picker span {
  cursor: pointer;
  font-size: 1.2rem;
  padding: 4px;
  border-radius: 3px;
}

.emoji-picker span:hover {
  background: var(--wikipedia-light-blue);
}

  </style>
</head>
<body>
  <div class="chat-container">
    <div class="chat-header">
      <div class="header-title">
        <i class="fas fa-comments"></i>
        <span>Wikipedia discussion: <strong><%= username %></strong></span>
      </div>
      <div class="header-actions">
        <button id="deleteAllBtn" class="delete-all">
          <i class="fas fa-trash-alt"></i> Purge
        </button>
      <input type="text" id="bellMessage" placeholder="Notify admin..." />
<button id="bellBtn"><i class="fa-solid fa-bell"></i></button>


        <a href="/dashboard" class="small-btn">
          <i class="fas fa-chart-line"></i> Dashboard
        </a>
        <a href="/logout" class="small-btn">
          <i class="fas fa-sign-out-alt"></i> Logout
        </a>
      </div>
    </div>

    <div class="chat-main">
      <div class="chat-messages" id="messages">
        <div class="discussion-heading">Discussion page</div>
        <!-- Messages will be added here -->
      </div>

      <div class="chat-users">
        <h3>Active contributors</h3>
        <ul id="users"></ul>
      </div>
    </div>

    <!-- Typing indicator positioned at the bottom -->
    <div id="typing-indicator" class="typing-indicator" style="display: none;">
      <span id="typing-text"></span>
      <div class="typing-dots">
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
      </div>
    </div>

    <div id="replyIndicator" class="reply-indicator" style="display: none;">
      <div>
        Replying to <span class="replying-to"></span>
      </div>
      <a class="cancel-reply">Cancel</a>
    </div>




    <form id="chatForm" class="chat-form">
      <input id="msg" autocomplete="off" placeholder="Contribute to the discussion..." />
      <button>
        <i class="fas fa-pencil-alt"></i> Post comment
      </button>
    </form>
  </div>
<script src="/socket.io/socket.io.js"></script>
<script>
const socket = io();
const username = "<%= username %>";
const messages = document.getElementById('messages');
const usersList = document.getElementById('users');
const form = document.getElementById('chatForm');
const input = document.getElementById('msg');
const deleteAllBtn = document.getElementById('deleteAllBtn');
const replyIndicator = document.getElementById('replyIndicator');
const replyingToSpan = document.querySelector('.replying-to');
const cancelReplyBtn = document.querySelector('.cancel-reply');
const typingIndicator = document.getElementById('typing-indicator');
const typingText = document.getElementById('typing-text');

let replyingToMessage = null;
let typingTimeout;
let isTyping = false;
let typingUsers = [];
let editingMessageId = null;
let originalMessageText = '';

function formatTime(date) {
  return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

socket.emit('joinChat', username);

socket.on('loadMessages', msgs => {
  if (msgs.length > 0) {
    const heading = document.querySelector('.discussion-heading');
    if (heading) heading.remove();
  }
  msgs.forEach(m => appendMessage(m));
});

socket.on('newMessage', m => {
  const heading = document.querySelector('.discussion-heading');
  if (heading) heading.remove();
  appendMessage(m);
});

socket.on('updateUsers', users => {
  usersList.innerHTML = '';
  users.forEach(u => {
    const li = document.createElement('li');
    li.textContent = u;
    usersList.appendChild(li);
  });
});

socket.on('messageDeleted', id => {
  const el = document.getElementById(id);
  if(el) {
    el.style.opacity = '0';
    setTimeout(()=> el.remove(), 300);
  }
  if(replyingToMessage && replyingToMessage._id === id) cancelReply();
  if(editingMessageId === id) { editingMessageId = null; input.value = ''; }
});

socket.on('allMessagesDeleted', () => {
  messages.innerHTML = '';
  const heading = document.createElement('div');
  heading.className = 'discussion-heading';
  heading.textContent = 'Discussion page';
  messages.appendChild(heading);

  const note = document.createElement('div');
  note.className = 'message-container receiver';
  note.innerHTML = `<div class='chat-bubble receiver'><b>System</b> Discussion was purged by a moderator</div>`;
  messages.appendChild(note);
  cancelReply();
  editingMessageId = null;
  input.value = '';
});

socket.on('userTyping', (users) => {
  typingUsers = users.filter(user => user !== username);
  updateTypingIndicator();
});

socket.on('messageEdited', (m) => {
  const container = document.getElementById(m._id);
  if (!container) return;
  const bubble = container.querySelector('.chat-bubble');
  if (!bubble) return;

  let content = escapeHtml(m.text || '');
  if (m.replyTo && m.replyTo.id) {
    const quoted = `<div class="quoted-message">In reply to ${escapeHtml(m.replyTo.username)}: ${escapeHtml(m.replyTo.text)}</div>`;
    content = quoted + content;
  }

  const editedTag = `<span class="edited-tag" style="font-size:0.75rem;color:#6b6f76;margin-left:6px;">(edited)</span>`;
  const delBtnHtml = bubble.querySelector('.delBtn') ? bubble.querySelector('.delBtn').outerHTML : '';
  
  bubble.innerHTML = `${content}${delBtnHtml}`;

  const info = container.querySelector('.message-info .message-time');
  if (info) {
    const parentSpan = info.parentElement;
    if (parentSpan && !parentSpan.querySelector('.edited-tag')) {
      parentSpan.insertAdjacentHTML('beforeend', editedTag);
    }
  }
});

socket.on('updateReactions', data => {
  const container = document.getElementById(`reactions-${data.messageId}`);
  if(!container) return;
  container.innerHTML = (data.reactions || []).map(r => `<span class="reaction">${r.emoji}</span>`).join('');
});

input.addEventListener('input', () => {
  if (!isTyping) {
    isTyping = true;
    socket.emit('typingStart', username);
  }

  clearTimeout(typingTimeout);
  typingTimeout = setTimeout(() => {
    isTyping = false;
    socket.emit('typingStop', username);
  }, 1000);
});

function updateTypingIndicator() {
  if (typingUsers.length > 0) {
    if (typingUsers.length === 1) {
      typingText.textContent = `${typingUsers[0]} is typing`;
    } else if (typingUsers.length === 2) {
      typingText.textContent = `${typingUsers[0]} and ${typingUsers[1]} are typing`;
    } else {
      typingText.textContent = `${typingUsers[0]} and ${typingUsers.length - 1} others are typing`;
    }
    typingIndicator.style.display = 'flex';
  } else {
    typingIndicator.style.display = 'none';
  }
}

form.addEventListener('submit', e => {
  e.preventDefault();
  const text = input.value.trim();
  if(!text) return;

  if (editingMessageId) {
    socket.emit('editMessage', { id: editingMessageId, newText: text, username });
    editingMessageId = null;
    originalMessageText = '';
    input.value = '';
    const btn = form.querySelector('button');
    if (btn) btn.innerHTML = `<i class="fas fa-pencil-alt"></i> Post comment`;
    return;
  }

  isTyping = false;
  socket.emit('typingStop', username);
  clearTimeout(typingTimeout);

  const payload = {
    username,
    text,
    replyTo: replyingToMessage ? { id: replyingToMessage._id, username: replyingToMessage.username, text: replyingToMessage.text } : null
  };
  socket.emit('chatMessage', payload);
  input.value = '';
  cancelReply();
});

deleteAllBtn.addEventListener('click', () => {
  if(confirm('Purge all messages from this discussion?')) socket.emit('deleteAllMessages');
});

cancelReplyBtn.addEventListener('click', cancelReply);
function cancelReply(){
  replyingToMessage = null;
  replyIndicator.style.display = 'none';
}

window.startEdit = function(id, text){
  editingMessageId = id;
  originalMessageText = text;
  input.value = text;
  input.focus();
  input.scrollIntoView({ behavior: 'smooth', block: 'center' });
  const btn = form.querySelector('button');
  if (btn) btn.innerHTML = `<i class="fas fa-save"></i> Save`;
  replyIndicator.style.display = 'none';
};

window.setupReply = function(data){
  replyingToMessage = data;
  replyingToSpan.textContent = data.username;
  replyIndicator.style.display = 'block';
  input.focus();
};

window.deleteMsg = function(id){
  if(confirm('Delete this message from the discussion?')) socket.emit('deleteMessage', id);
};

function escapeHtml(s){
  if(typeof s !== 'string') return s;
  return String(s).replace(/[&<>"']/g, function(m){ return {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]; });
}

function appendMessage(m) {
  const isMe = m.username === username;
  const container = document.createElement('div');
  container.className = `message-container ${isMe ? 'sender' : 'receiver'}`;
  container.id = m._id;

  const bubble = document.createElement('div');
  bubble.className = `chat-bubble ${isMe ? 'sender' : 'receiver'}`;

  let content = escapeHtml(m.text || '');
  if (m.replyTo && m.replyTo.id) {
    const quoted = `<div class="quoted-message">In reply to ${escapeHtml(m.replyTo.username)}: ${escapeHtml(m.replyTo.text)}</div>`;
    content = quoted + content;
  }

  bubble.innerHTML = `${content}
    <button class="delBtn" onclick="deleteMsg('${m._id}')" title="Delete message"><i class="fas fa-times"></i></button>
  `;

  // Reactions container
  const reactionsHtml = `<div class="reactions" id="reactions-${m._id}" style="margin-top:4px; display:flex; gap:4px;"></div>`;
  bubble.innerHTML += reactionsHtml;

  // ===== REACTION BUTTON + EMOJI PICKER (RESPONSIVE) =====
  const reactionBtn = document.createElement('button');
  reactionBtn.innerHTML = 'react';
  reactionBtn.className = 'reaction-btn';
  bubble.appendChild(reactionBtn);

  const emojiPicker = document.createElement('div');
  emojiPicker.className = 'emoji-picker';
  emojiPicker.style.position = 'absolute';
  emojiPicker.style.display = 'none';
  emojiPicker.style.flexWrap = 'wrap';
  emojiPicker.style.background = '#fff';
  emojiPicker.style.border = '1px solid #ccc';
  emojiPicker.style.padding = '4px';
  emojiPicker.style.borderRadius = '8px';
  emojiPicker.style.boxShadow = '0 2px 8px rgba(0,0,0,0.15)';
  emojiPicker.style.zIndex = 1000;

  const emojis = ['👍','❤️','😂','😮','😢','😡','🎉'];
  emojis.forEach(emoji => {
    const span = document.createElement('span');
    span.textContent = emoji;
    span.style.cursor = 'pointer';
    span.style.fontSize = '1.2rem';
    span.style.margin = '2px';
    span.addEventListener('click', () => {
      socket.emit('addReaction', { messageId: m._id, emoji, username });
      emojiPicker.style.display = 'none';
    });
    emojiPicker.appendChild(span);
  });

  document.body.appendChild(emojiPicker);

  reactionBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    const rect = reactionBtn.getBoundingClientRect();
    emojiPicker.style.top = window.scrollY + rect.top - emojiPicker.offsetHeight - 6 + 'px';
    emojiPicker.style.left = window.scrollX + rect.left + 'px';
    emojiPicker.style.display = emojiPicker.style.display === 'flex' ? 'none' : 'flex';
  });

  document.addEventListener('click', (e) => {
    if (!emojiPicker.contains(e.target) && e.target !== reactionBtn) {
      emojiPicker.style.display = 'none';
    }
  });

  // Message info
  const info = document.createElement('div');
  info.className = 'message-info';
  const editedHtml = m.edited ? `<span class="edited-tag" style="font-size:0.75rem;color:#6b6f76;margin-left:6px;">(edited)</span>` : '';
  let rightPart = `
    <span class="message-time">${formatTime(m.createdAt || Date.now())}</span>
    ${editedHtml}
    <button class="reply-btn" onclick='window.setupReply(${JSON.stringify({ _id: m._id, username: m.username, text: m.text })})' title="Reply to this message"><i class="fas fa-reply"></i> Reply</button>
  `;
  if (isMe) {
    rightPart += ` <button class="reply-btn" onclick="window.startEdit('${m._id}', '${m.text.replace(/'/g, "\\'").replace(/\n/g,'\\n')}')" title="Edit message"><i class="fas fa-edit"></i> Edit</button>`;
  }
  info.innerHTML = `<span class="message-sender">${escapeHtml(m.username)}</span><span>${rightPart}</span>`;

  container.appendChild(bubble);
  container.appendChild(info);
  messages.appendChild(container);
  messages.scrollTop = messages.scrollHeight;
}


// Bell button notification
const notifyBtn = document.getElementById('notifyBtn');
if (notifyBtn) {
  notifyBtn.addEventListener('click', () => {
    socket.emit('sendTelegramAlert', {
      username,
      message: `${username} pressed the 🔔 bell in chat`
    });
    alert("Notification sent to Telegram!");
  });


  
}
// ---------- Bell button click - send custom message ----------
const bellBtn = document.getElementById('bellBtn');
const bellMessageInput = document.getElementById('bellMessage');

bellBtn.addEventListener('click', () => {
  const message = bellMessageInput.value.trim() || "🔔 Bell pressed!";

  // Send message to server via socket
  socket.emit('sendTelegramAlert', {
    username,
    message
  });

  // Clear input field
  bellMessageInput.value = '';

  // Optional: show small alert in browser
  alert("Bell message sent!");
});


</script>



</body>
</html>