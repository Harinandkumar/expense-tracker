<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Wikipedia Chat</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    /* Wikipedia-inspired color scheme */
    :root {
      --wikipedia-blue: #3366cc;
      --wikipedia-light-blue: #eaf3ff;
      --wikipedia-dark-blue: #2a4b8d;
      --wikipedia-gray: #f8f9fa;
      --wikipedia-border: #a2a9b1;
      --wikipedia-text: #202122;
      --wikipedia-red: #cc0000;
      --wikipedia-green: #00af89;
      --wikipedia-background: #f8f9fa;
      --wikipedia-reply-indicator: #e6f2ff;
      --wikipedia-sidebar-bg: #f6f6f6;
    }

    /* Reset & Base Styles */
    * { 
      margin: 0; 
      padding: 0; 
      box-sizing: border-box; 
    }
    
    body { 
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Lato, Helvetica, Arial, sans-serif;
      background: var(--wikipedia-background);
      color: var(--wikipedia-text);
      line-height: 1.6;
      height: 100vh;
      display: flex;
      flex-direction: column;
    }

    /* Wikipedia-style header */
    .chat-header { 
      background: white;
      border-bottom: 1px solid var(--wikipedia-border);
      padding: 0.5em 1.5em;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    
    .header-title {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 0.875rem;
      font-weight: normal;
    }
    
    .header-title strong {
      font-weight: bold;
      color: var(--wikipedia-blue);
    }
    
    .username {
      font-weight: bold;
      color: var(--wikipedia-dark-blue);
      font-size: 0.875rem;
    }
    
    .header-actions {
      display: flex;
      gap: 8px;
    }
    
    .chat-header button,
    .chat-header a { 
      padding: 0.375rem 0.75rem;
      border: 1px solid var(--wikipedia-border);
      border-radius: 2px;
      font-size: 0.75rem;
      text-decoration: none;
      cursor: pointer;
      transition: background-color 0.2s;
      background: white;
      color: var(--wikipedia-text);
    }
    
    .delete-all { 
      color: var(--wikipedia-red);
      border-color: var(--wikipedia-red);
    }
    
    .chat-header button:hover, 
    .chat-header a:hover { 
      background: var(--wikipedia-gray);
    }
    
    .delete-all:hover {
      background: #ffeeee;
    }

    /* Main chat container */
    .chat-container {
      display: flex;
      flex-direction: column;
      height: 100%;
      max-width: 100%;
      margin: 0;
      background: white;
      width: 100%;
    }

    /* Wikipedia-style content area */
    .chat-main { 
      display: flex;
      flex: 1;
      overflow: hidden;
    }

    /* Chat messages - Wikipedia discussion style */
    .chat-messages { 
      flex: 1;
      padding: 1.5em;
      background: white;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 1.5em;
    }
    
    /* Message containers */
    .message-container {
      display: flex;
      flex-direction: column;
      max-width: 85%;
      position: relative;
    }
    
    .message-container.sender {
      align-self: flex-end;
      align-items: flex-end;
    }
    
    .message-container.receiver {
      align-self: flex-start;
      align-items: flex-start;
    }
    
    /* Message bubbles */
    .chat-bubble { 
      padding: 0.75em 1em;
      border: 1px solid var(--wikipedia-border);
      border-radius: 3px;
      background: white;
      position: relative;
      word-wrap: break-word;
      line-height: 1.5;
      width: 100%;
      font-size: 0.875rem;
    }
    
    .chat-bubble.sender { 
      background: var(--wikipedia-light-blue);
      border-color: #a2c0e6;
    }
    
    .chat-bubble.receiver { 
      background: var(--wikipedia-gray);
    }
    
    /* Message info (sender and time) */
    .message-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 0.75rem;
      margin-top: 0.25em;
      padding: 0 0.25em;
      width: 100%;
      color: #54595d;
    }
    
    .message-sender {
      font-weight: bold;
      color: var(--wikipedia-dark-blue);
    }
    
    .message-time {
      color: #72777d;
    }
    
    /* Delete button - subtle Wikipedia style */
    .delBtn { 
      background: transparent;
      border: none;
      color: #72777d;
      cursor: pointer;
      font-size: 0.75rem;
      position: absolute;
      top: 0.5em;
      right: 0.5em;
      opacity: 0;
      transition: opacity 0.2s;
      padding: 0.125em;
    }
    
    .chat-bubble:hover .delBtn { 
      opacity: 1;
    }
    
    .delBtn:hover {
      color: var(--wikipedia-red);
    }

    /* Users sidebar - Wikipedia style */
    .chat-users { 
      width: 240px;
      padding: 1em;
      background: var(--wikipedia-sidebar-bg);
      overflow-y: auto;
      border-left: 1px solid var(--wikipedia-border);
    }
    
    .chat-users h3 { 
      margin: 0 0 1em 0;
      font-size: 1rem;
      font-weight: bold;
      color: var(--wikipedia-text);
      padding-bottom: 0.5em;
      border-bottom: 1px solid var(--wikipedia-border);
    }
    
    .chat-users ul { 
      list-style: none;
    }
    
    .chat-users li { 
      padding: 0.5em 0.75em;
      margin-bottom: 0.25em;
      font-size: 0.875rem;
      border-bottom: 1px solid #eaecf0;
    }
    
    .chat-users li:before {
      content: "â€¢";
      color: var(--wikipedia-green);
      font-weight: bold;
      display: inline-block;
      width: 1em;
      margin-left: -1em;
    }

    /* Chat form - Wikipedia style */
    .chat-form { 
      display: flex;
      padding: 1em 1.5em;
      background: #f8f9fa;
      border-top: 1px solid var(--wikipedia-border);
      gap: 0.5em;
    }
    
    .chat-form input { 
      flex: 1;
      padding: 0.625em 0.75em;
      border: 1px solid var(--wikipedia-border);
      border-radius: 2px;
      outline: none;
      font-size: 0.875rem;
      font-family: inherit;
    }
    
    .chat-form input:focus {
      border-color: var(--wikipedia-blue);
      box-shadow: 0 0 0 1px var(--wikipedia-blue);
    }
    
    .chat-form button { 
      padding: 0.625em 1em;
      border: 1px solid var(--wikipedia-blue);
      border-radius: 2px;
      background: var(--wikipedia-blue);
      color: white;
      cursor: pointer;
      font-family: inherit;
      font-size: 0.875rem;
      white-space: nowrap;
    }
    
    .chat-form button:hover { 
      background: var(--wikipedia-dark-blue);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .chat-main {
        flex-direction: column;
      }
      
      .chat-users {
        width: 100%;
        border-left: none;
        border-top: 1px solid var(--wikipedia-border);
        order: -1;
        max-height: 150px;
      }
      
      .message-container {
        max-width: 95%;
      }
      
      .header-actions {
        flex-wrap: wrap;
        justify-content: flex-end;
      }
      
      .chat-header {
        padding: 0.5em;
      }
      
      .chat-messages {
        padding: 1em;
      }
    }

    /* Signature style for usernames */
    .message-sender:after {
      content: " (talk)";
      font-weight: normal;
      font-size: 0.6875rem;
      color: #54595d;
    }
    
    /* Reply functionality styles */
    .reply-btn {
      background: transparent;
      border: none;
      color: #72777d;
      cursor: pointer;
      font-size: 0.75rem;
      margin-left: 0.5em;
      padding: 0.125em 0.375em;
    }
    
    .reply-btn:hover {
      color: var(--wikipedia-blue);
      text-decoration: underline;
    }
    
    .reply-indicator {
      background: var(--wikipedia-reply-indicator);
      border-left: 3px solid var(--wikipedia-blue);
      padding: 0.75em 1em;
      margin: 0 1.5em;
      font-size: 0.8125rem;
      border-radius: 2px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .reply-indicator .replying-to {
      font-weight: bold;
      color: var(--wikipedia-dark-blue);
    }
    
    .reply-indicator .cancel-reply {
      margin-left: 0.5em;
      color: var(--wikipedia-blue);
      cursor: pointer;
      font-size: 0.75rem;
    }
    
    .reply-indicator .cancel-reply:hover {
      text-decoration: underline;
    }
    
    .quoted-message {
      font-style: italic;
      color: #54595d;
      border-left: 2px solid #a2a9b1;
      padding-left: 0.5em;
      margin: 0.5em 0;
      font-size: 0.8125rem;
      line-height: 1.4;
    }
    
    /* Wikipedia-style horizontal rule */
    .chat-messages hr {
      height: 1px;
      background-color: var(--wikipedia-border);
      border: 0;
      margin: 1.5em 0;
    }
    
    /* Section heading style */
    .discussion-heading {
      font-size: 1.125rem;
      font-weight: bold;
      color: var(--wikipedia-text);
      border-bottom: 1px solid var(--wikipedia-border);
      padding-bottom: 0.5em;
      margin-bottom: 1em;
    }
    
    /* Wikipedia link style */
    a {
      color: var(--wikipedia-blue);
      text-decoration: none;
    }
    
    a:hover {
      text-decoration: underline;
    }
    
    /* Notification style */
    .notification {
      background: #fef6e7;
      border: 1px solid #fc3;
      padding: 0.75em 1em;
      margin: 1em 0;
      border-radius: 2px;
      font-size: 0.875rem;
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <div class="chat-header">
      <div class="header-title">
        <i class="fas fa-comments"></i>
        <span>Wikipedia discussion: <strong><%= username %></strong></span>
      </div>
      <div class="header-actions">
        <button id="deleteAllBtn" class="delete-all">
          <i class="fas fa-trash-alt"></i> Purge
        </button>
        <a href="/dashboard" class="small-btn">
          <i class="fas fa-chart-line"></i> Dashboard
        </a>
        <a href="/logout" class="small-btn">
          <i class="fas fa-sign-out-alt"></i> Logout
        </a>
      </div>
    </div>

    <div class="chat-main">
      <div class="chat-messages" id="messages">
        <div class="discussion-heading">Discussion page</div>
      </div>

      <div class="chat-users">
        <h3>Active contributors</h3>
        <ul id="users"></ul>
      </div>
    </div>

    <div id="replyIndicator" class="reply-indicator" style="display: none;">
      <div>
        Replying to <span class="replying-to"></span>
      </div>
      <a class="cancel-reply">Cancel</a>
    </div>

    <form id="chatForm" class="chat-form">
      <input id="msg" autocomplete="off" placeholder="Contribute to the discussion..." />
      <button>
        <i class="fas fa-pencil-alt"></i> Post comment
      </button>
    </form>
  </div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  const username = "<%= username %>";
  const messages = document.getElementById('messages');
  const usersList = document.getElementById('users');
  const form = document.getElementById('chatForm');
  const input = document.getElementById('msg');
  const deleteAllBtn = document.getElementById('deleteAllBtn');
  const replyIndicator = document.getElementById('replyIndicator');
  const replyingToSpan = document.querySelector('.replying-to');
  const cancelReplyBtn = document.querySelector('.cancel-reply');

  let replyingToMessage = null;

  function formatTime(date) {
    return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  }

  // join
  socket.emit('joinChat', username);

  // load old messages
  socket.on('loadMessages', msgs => {
    // Remove the initial heading if we have messages
    if (msgs.length > 0) {
      const heading = document.querySelector('.discussion-heading');
      if (heading) heading.remove();
    }
    
    msgs.forEach(m => appendMessage(m));
  });

  // new incoming
  socket.on('newMessage', m => {
    // Remove the initial heading when first message arrives
    const heading = document.querySelector('.discussion-heading');
    if (heading) heading.remove();
    
    appendMessage(m);
  });

  // update users
  socket.on('updateUsers', users => {
    usersList.innerHTML = '';
    users.forEach(u => {
      const li = document.createElement('li');
      li.textContent = u;
      usersList.appendChild(li);
    });
  });

  // message deleted
  socket.on('messageDeleted', id => {
    const el = document.getElementById(id);
    if(el) {
      el.style.opacity = '0';
      setTimeout(()=> el.remove(), 300);
    }
    if(replyingToMessage && replyingToMessage._id === id) cancelReply();
  });

  // all messages deleted
  socket.on('allMessagesDeleted', () => {
    messages.innerHTML = '';
    
    // Add the heading back when all messages are deleted
    const heading = document.createElement('div');
    heading.className = 'discussion-heading';
    heading.textContent = 'Discussion page';
    messages.appendChild(heading);
    
    const note = document.createElement('div');
    note.className = 'message-container receiver';
    note.innerHTML = `<div class="chat-bubble receiver"><b>System</b> Discussion was purged by a moderator</div>`;
    messages.appendChild(note);
    cancelReply();
  });

  // send (with reply support)
  form.addEventListener('submit', e => {
    e.preventDefault();
    const text = input.value.trim();
    if(!text) return;
    const payload = {
      username,
      text,
      replyTo: replyingToMessage ? { id: replyingToMessage._id, username: replyingToMessage.username, text: replyingToMessage.text } : null
    };
    socket.emit('chatMessage', payload);
    input.value = '';
    cancelReply();
  });

  // delete all
  deleteAllBtn.addEventListener('click', () => {
    if(confirm('Purge all messages from this discussion?')) socket.emit('deleteAllMessages');
  });

  cancelReplyBtn.addEventListener('click', cancelReply);

  function cancelReply(){
    replyingToMessage = null;
    replyIndicator.style.display = 'none';
  }

  window.setupReply = function(data){
    // data passed as JS object (from onclick)
    replyingToMessage = data;
    replyingToSpan.textContent = data.username;
    replyIndicator.style.display = 'block';
    input.focus();
  };

  window.deleteMsg = function(id){
    if(confirm('Delete this message from the discussion?')) socket.emit('deleteMessage', id);
  };

  // helper - escape HTML
  function escapeHtml(s){
    if(typeof s !== 'string') return s;
    return String(s).replace(/[&<>"']/g, function(m){ return {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]; });
  }

  function appendMessage(m){
    // m expected shape: {_id, username, text, replyTo: {id, username, text} | null, createdAt}
    const isMe = m.username === username;
    const container = document.createElement('div');
    container.className = `message-container ${isMe ? 'sender' : 'receiver'}`;
    container.id = m._id;

    const bubble = document.createElement('div');
    bubble.className = `chat-bubble ${isMe ? 'sender' : 'receiver'}`;

    // reply block
    let content = escapeHtml(m.text || '');
    if (m.replyTo && m.replyTo.id) {
      const quoted = `<div class="quoted-message">In reply to ${escapeHtml(m.replyTo.username)}: ${escapeHtml(m.replyTo.text)}</div>`;
      content = quoted + content;
    }

    bubble.innerHTML = `${content}
      <button class="delBtn" onclick="deleteMsg('${m._id}')" title="Delete message"><i class="fas fa-times"></i></button>
    `;

    const info = document.createElement('div');
    info.className = 'message-info';
    info.innerHTML = `
      <span class="message-sender">${escapeHtml(m.username)}</span>
      <span>
        <span class="message-time">${formatTime(m.createdAt || Date.now())}</span>
        <button class="reply-btn" onclick='window.setupReply(${JSON.stringify({ _id: m._id, username: m.username, text: m.text })})' title="Reply to this message"><i class="fas fa-reply"></i> Reply</button>
      </span>
    `;

    container.appendChild(bubble);
    container.appendChild(info);
    messages.appendChild(container);
    messages.scrollTop = messages.scrollHeight;
  }
</script>
</body>
</html>